#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatejs:server');
var http = require('http');
var cookie = require("cookie");
var db = require('../sql');

Date.prototype.format = function (format) {
  var o = {
    "M+": this.getMonth() + 1, //month
    "d+": this.getDate(), //day
    "h+": this.getHours(), //hour
    "m+": this.getMinutes(), //minute
    "s+": this.getSeconds(), //second
    "q+": Math.floor((this.getMonth() + 3) / 3), //quarter
    "S": this.getMilliseconds() //millisecond
  }
  var ampm = "AM";
  if (o["h+"] > 12) {
    o["h+"] -= 12;
    ampm = "PM";
  }
  if (o["h+"] == 0) {
    o["h+"] += 12;
  }
  if (o["h+"] == 12) {
    ampm = "PM";
  }
  if (/(y+)/.test(format)) {
    format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
  }
  for (var k in o) if (new RegExp("(" + k + ")").test(format))
    format = format.replace(RegExp.$1,
      RegExp.$1.length == 1 ? o[k] :
        ("00" + o[k]).substr(("" + o[k]).length));

  format += ampm;
  return format;
}
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server);

// users = [];
connections = [];

io.on('connection', socket => {
  connections.push(socket);
  console.log('User connected:'+ connections.length);

  socket.on('disconnect', function (data) {
    //  connections.splice(connections.indexOf(socket),1);
    console.log('User disconnected');
    connections.splice(connections.indexOf(socket));
  })

  socket.on('send message', function (msg) {
    console.log("send data:" + msg);

    var cookies = cookie.parse(socket.handshake.headers.cookie);
    console.log(cookies);

    var date = new Date().format('MM.dd.yyyy hh:mm');
    console.log(date);

    db.query("insert into comment value (?,?,?,?)", [0, cookies.userId, msg, date], function (err, data) {
      if (err) throw err;
      io.sockets.emit('new', {
        username: cookies.userName,
        time: date,
        comment: msg
      });
      console.log("new");
    });

  })

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
